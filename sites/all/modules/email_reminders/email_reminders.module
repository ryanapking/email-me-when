<?php

/*
* Implements hook_permission()
*/
function email_reminders_permission() {
    $permissions['administer email reminders'] = array(
            'title' => t('Administer Email Reminders'),
            'description' => t('Perform administration tasks for Email Reminders module.'),
        );
    return $permissions;
}

/*
* Implements hook_menu()
*/
function email_reminders_menu() {
    $items = array();
    $items['admin/config/email_reminders'] = array(
            'title' => 'Email Reminder Settings',
            'type' => MENU_NORMAL_ITEM,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('email_reminders_config_form'),
            'access arguments' => array('administer email reminders'),
        );
    return $items;
}

/*
* Administration form for Email Reminders module
*/
function email_reminders_config_form($form, &$form_state) {
    $form['email_reminders_enable'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable Email Reminders'),
            '#default_value' => variable_get('email_reminders_enable', 0),
        );
    $form['email_reminders_send_from'] = array(
            '#type' => 'textfield',
            '#title' => t('Send From Email Address'),
            '#description' => t('Email address that will be used to send the reminders.'),
            '#default_value' => variable_get('email_reminders_send_from', ''),
        );
    return system_settings_form($form);
}

/*
* Implements hook_node_access()
* restricts access to the creator of the node
*/
function email_reminders_node_access($node, $op, $account) {
    if (gettype($node) == 'object') {
        if (property_exists($node, 'uid')) {
            if ($account->uid != $node->uid) {
                return NODE_ACCESS_DENY;
            } else {
                return NODE_ACCESS_ALLOW;
            }
        }
    }
}

/*
* Implements hook_form_alter()
* Removes certain options from the create email reminder form to make the form
* friendlier for authenticated users
*/
function email_reminders_form_alter(&$form, &$form_state, &$form_id) {
    if ($form_id == 'email_reminders_reminder_node_form') {
        $form['options']['promote']['#default_value'] = 0;
        $form['comment_settings']['comment']['#default_value'] = 1;
        $form['author']['name']['#default_value'] = '';
        $form['email_reminders_status']['und']['#options'] = status_options();
        $roles = $GLOBALS['user']->roles;
        if (!in_array('administrator', $roles)) {
            $form['#after_build'][] = 'email_reminders_after_build';
            $form['email_reminders_email_address']['#access'] = FALSE;
        }
        if (!$form['email_reminders_email_address']['und'][0]['value']['#value']) {
            $form['email_reminders_email_address']['und'][0]['value']['#value'] = $GLOBALS['user']->mail;
        }
        dsm($form_state);
        dsm($form);
    }
}

// callback function that hides cck fields after the form is built
function email_reminders_after_build(&$form, &$form_state) {
    dsm($form_state);
    $form['comment_settings']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
    $form['menu']['#access'] = FALSE;
    $form['email_reminders_status']['#access'] = FALSE;
    return $form;
}

// returns status select box options
function status_options() {
    $options = array();
    $options['Pending'] = 'Pending';
    $options['Sent'] = 'Sent';
    return $options;
}

/*
* Implements hook_cron()
* Sends necessary emails every time Cron runs -- default interval is 3 hours
*/
function email_reminders_cron() {
    $query = new EntityFieldQuery();
    // Maybe query should be tweaked to limit to the current day (if possible)
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'email_reminders_reminder')
        ->fieldCondition('email_reminders_status', 'value', 'Pending', '=');
    $results = $query->execute();
    if ($results) {
        foreach($results['node'] as $node) {
            $node = node_load($node->nid);
            if (sendCheck($node)) {
                dpm('send now');
                $email_address = $node->email_reminders_email_address['und'][0]['value'];
                // drupal_mail('email_reminders', 'email_reminders_base', $email_address, language_default(), $node);
                // markSent($node);
            } else {
                dpm('not time to send');
            }
        }
    }
    // dpm($results);
    // drupal_mail('email_reminders', 'email_reminders_base', 'ryan.apking@gmail.com', language_default());
}

// checks if the email should be sent now, returns true or false
function sendCheck($node) {
    dpm($node);
    $time = $node->email_reminders_send_date['und'][0]['value'];
    $timezone = $node->email_reminders_send_date['und'][0]['timezone'];
    dpm($time);
    dpm($timezone);
    $dateObject = new DateObject($time, new DateTimeZone('UTC'));
    dpm(date('D, d M Y H:i:s', $dateObject->getTimeStamp()), 'Reminder Time');
    dpm(date('D, d M Y H:i:s'), 'Current Time');
    dpm($dateObject);
    if (time() >= $dateObject->getTimeStamp()) {
        return TRUE;
    } else {
        return FALSE;
    }
}

// changes the email reminder's status to sent in the database
function markSent($node) {
    $node->email_reminders_status['und'][0]['value'] = 'Sent';
    node_save($node);
}

/*
* Implements hook_mail()
* Sets up the email template to be used in Cron
*/
function email_reminders_mail($key, &$message, $params) {
    switch($key) {
        case 'email_reminders_base':
            $subject = $params->email_reminders_subject_line['und'][0]['value'];
            $body = $params->body['und'][0]['value'];
            $message['subject'] = t($subject);
            $message['body'][] = t($body);
            break;
    }
}
